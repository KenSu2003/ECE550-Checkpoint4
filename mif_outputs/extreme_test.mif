-- null
DEPTH = 4096;
WIDTH = 32;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN
    -- nop
0000 : 00000000000000000000000000000000;
    -- addi $1,  $0,   7        # $1 = 7
0001 : 00101000010000000000000000000111;
    -- addi $2,  $0,  13        # $2 = 13
0002 : 00101000100000000000000000001101;
    -- addi $3,  $0,  -5        # $3 = -5 (sign-extended)
0003 : 00101000110000011111111111111011;
    -- addi $5,  $0, 100        # $5 = 100  (base for memory tests)
0004 : 00101001010000000000000001100100;
    -- addi $12, $0,   1        # $12 = 1   (for shifts)
0005 : 00101011000000000000000000000001;
    -- add  $6,  $1,  $2        # $6 = $1 + $2  => 20
0006 : 00000001100000100010000000000000;
    -- sub  $7,  $2,  $1        # $7 = $2 - $1  => 6
0007 : 00000001110001000001000000000100;
    -- and  $8,  $1,  $2        # $8 = 7 & 13
0008 : 00000010000000100010000000001000;
    -- or   $9,  $1,  $2        # $9 = 7 | 13
0009 : 00000010010000100010000000001100;
    -- addi $10, $1,  -3        # $10 = 7 + (-3) => 4
0010 : 00101010100000111111111111111101;
    -- addi $11, $3,   1        # $11 = -5 + 1 => -4
0011 : 00101010110001100000000000000001;
    -- sll  $13, $12,  4        # $13 = 1 << 4 => 16
0012 : 00000011010110000000001000010000;
    -- addi $14, $0, -16        # $14 = -16
0013 : 00101011100000011111111111110000;
    -- sra  $15, $14,  2        # $15 = -16 >>> 2 => -4
0014 : 00000011110111000000000100010100;
    -- sw   $6,  3($5)          # MEM[103] = $6 (20)
0015 : 00111001100010100000000000000011;
    -- lw   $7,  3($5)          # $7 = MEM[103] => overwrites $7 with 20
0016 : 01000001110010100000000000000011;
    -- addi $20, $0, 1          # $20 = 1
0017 : 00101101000000000000000000000001;
    -- sll  $20, $20, 30        # $20 = 1 << 30 = 0x40000000
0018 : 00000101001010000000111100010000;
    -- add  $21, $20, $20       # $21 = $20 + $20 => 0x80000000 (signed overflow)
0019 : 00000101011010010100000000000000;
    -- addi $28, $0, 32767      # $28 = 32767
0020 : 00101111000000000111111111111111;
    -- sll  $28, $28, 16        # $28 <<= 16 => 0x7FFF0000
0021 : 00000111001110000000100000010000;
    -- addi $28, $28, 65535     # $28 = 0x7FFF0000 + 65535 => 0x7FFFFFFF (INT_MAX)
0022 : 00101111001110001111111111111111;
    -- addi $28, $28, 1         # overflow -> $28 becomes 0x80000000 and rstatus=2 in $30
0023 : 00101111001110000000000000000001;
    -- addi $29, $0, 1          # $29 = 1
0024 : 00101111010000000000000000000001;
    -- sll  $29, $29, 31        # $29 = 1 << 31 = 0x80000000 (signed MIN)
0025 : 00000111011110100000111110010000;
    -- sub  $23, $29, $12       # causes overflow -> rstatus = 3 in $30
0026 : 00000101111110101100000000000100;
    -- addi $16, $1, 4          # $16 = $1 + 4   
0027 : 00101100000000100000000000000100;
    -- addi $17, $0, 999        # $17 = 999      
0028 : 00101100010000000000001111100111;
    -- sw   $17, 11($5)         # MEM[$5 + 11] = 999
0029 : 00111100010010100000000000001011;
    -- lw   $18, 11($5)         # $18 = MEM[$5 + 11] => 999
0030 : 01000100100010100000000000001011;
    -- add  $19, $18, $6        # $19 = $18 + $6  => 999 + 20 = 1019
0031 : 00000100111001000110000000000000;
    -- addi $30, $0, 65535       # $30 = 65535  (use temp reg
0032 : 00101111100000001111111111111111;
    -- addi $24, $0, 65535       # $24 = +65535  (boundary +)
0033 : 00101110000000001111111111111111;
    -- addi $25, $0, -65536      # $25 = -65536 (boundary -)
0034 : 00101110010000010000000000000000;
    -- sw   $1, 0($5)            # MEM[$5 + 0] = $1 (7)
0035 : 00111000010010100000000000000000;
    -- sw   $1, -1($5)           # MEM[$5 - 1] = $1 (tests negative offset)
0036 : 00111000010010111111111111111111;
    -- lw   $26, 0($5)           # $26 = MEM[$5 + 0] -> should be 7
0037 : 01000110100010100000000000000000;
    -- lw   $27, -1($5)          # $27 = MEM[$5 - 1] -> should be 7
0038 : 01000110110010111111111111111111;
    -- sw   $3, 5($5)            # MEM[$5 + 5] = $3 (-5)
0039 : 00111000110010100000000000000101;
    -- lw   $14, 5($5)           # $14 = MEM[$5 + 5] -> should be -5
0040 : 01000011100010100000000000000101;
    -- addi $2, $0, 21           # $2 = 21  (ensure $2 changed)
0041 : 00101000100000000000000000010101;
    -- sw   $2, 7($5)            # MEM[$5 + 7] = $2 (21)
0042 : 00111000100010100000000000000111;
    -- lw   $8, 7($5)            # $8 = 21
0043 : 01000010000010100000000000000111;
    -- sw   $6, 1($5)            # MEM[$5 + 1] = 20
0044 : 00111001100010100000000000000001;
    -- sw   $9, 2($5)            # MEM[$5 + 2] = ($9 from earlier)
0045 : 00111010010010100000000000000010;
    -- lw   $21, 1($5)           # $21 = 20
0046 : 01000101010010100000000000000001;
    -- lw   $22, 2($5)           # $22 = $9
0047 : 01000101100010100000000000000010;
    -- addi $31, $0, 32767       # $31 = 32767
0048 : 00101111110000000111111111111111;
    -- sll  $31, $31, 16         # $31 <<=16 -> 0x7FFF0000
0049 : 00000111111111100000100000010000;
    -- addi $31, $31, 65535      # $31 = 0x7FFFFFFF (INT_MAX)
0050 : 00101111111111101111111111111111;
    -- addi $31, $31, 1          # overflow -> $30 should be set to 2 (check rstatus immed after this)
0051 : 00101111111111100000000000000001;
    -- nop
0052 : 00000000000000000000000000000000;
[0053 .. 4095] : 00000000000000000000000000000000;
END;
